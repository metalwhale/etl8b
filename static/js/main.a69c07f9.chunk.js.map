{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","IMAGE_SIZE","INPUT_SHAPE","PROBABILITY_THRESHOLD","signature","useRef","_useState","useState","_useState2","Object","slicedToArray","model","setModel","_useState3","_useState4","matches","setMatches","useEffect","tf","then","react_default","a","createElement","className","build_default","ref","backgroundColor","penColor","canvasProps","width","height","onClick","current","clear","style","float","data","getTrimmedCanvas","getContext","getImageData","image","fromPixels","resizeBilinear","expandDims","minimum","predict","batchSize","results","predictions","reduce","p","r","i","push","character","labels","probability","sort","p1","p2","map","match","index","key","Math","round","Boolean","window","location","hostname","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"8UAoEeA,MA9Df,WACE,IAAMC,EAAa,IACbC,EAAc,CAAC,GAAI,IACnBC,EAAwB,IACxBC,EAAYC,iBAAO,MAJZC,EAKaC,mBAAS,MALtBC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GAKNK,EALMH,EAAA,GAKCI,EALDJ,EAAA,GAAAK,EAMiBN,mBAAS,IAN1BO,EAAAL,OAAAC,EAAA,EAAAD,CAAAI,EAAA,GAMNE,EANMD,EAAA,GAMGE,EANHF,EAAA,GAmCb,OA3BAG,oBAAU,WACRC,IAAmB,2BAA2BC,KAAK,SAAAR,GACjDC,EAASD,MAEV,IAwBDS,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAACE,EAAAH,EAAD,CACEI,IAAKrB,EACLsB,gBAAgB,QAChBC,SAAS,QACTC,YAAa,CAACC,MAAO5B,EAAY6B,OAAQ7B,EAAYsB,UAAW,sBAEjEZ,EACCS,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACbH,EAAAC,EAAAC,cAAA,UAAQS,QAhClB,WACE3B,EAAU4B,QAAQC,SA+BcC,MAAO,CAACC,MAAO,SAAvC,SACAf,EAAAC,EAAAC,cAAA,UAAQS,QA7BlB,WACE,IAEMK,EAFShC,EAAU4B,QAAQK,mBACVC,WAAW,MACbC,aAAa,EAAG,EAAGtC,EAAYA,GAC9CuC,EAAQtB,IAAWuB,WAAWL,EAAM,GAAGM,eAAexC,GAAayC,aAAaC,QAAQ1B,IAAU,IACxGP,EAAMkC,QAAQL,EAAO,CAACM,UAAW,IAAIV,OAAOjB,KAAK,SAAA4B,GAC/C,IAAMC,EAAcD,EAAQE,OAAO,SAACC,EAAGC,EAAGC,GAIxC,OAHID,GAAKhD,GACP+C,EAAEG,KAAK,CAACC,UAAWC,EAAOH,GAAII,YAAaL,IAEtCD,GACN,IACHF,EAAYS,KAAK,SAACC,EAAIC,GAAL,OAAYA,EAAGH,YAAcE,EAAGF,cACjDxC,EAAWgC,MAgBuBd,MAAO,CAACC,MAAO,UAA3C,cAGFf,EAAAC,EAAAC,cAAA,+BAEFF,EAAAC,EAAAC,cAAA,WACGP,EAAQ6C,IAAI,SAACC,EAAOC,GAAR,OACX1C,EAAAC,EAAAC,cAAA,OAAKyC,IAAKD,GAAQD,EAAMP,UAAxB,KAAqCU,KAAKC,MAA0B,IAApBJ,EAAML,aAAtD,YChDQU,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASR,MACvB,2DCZNS,IAASC,OAAOnD,EAAAC,EAAAC,cAACkD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM1D,KAAK,SAAA2D,GACjCA,EAAaC","file":"static/js/main.a69c07f9.chunk.js","sourcesContent":["import React, { useRef, useEffect, useState } from 'react';\nimport SignatureCanvas from 'react-signature-canvas';\nimport * as tf from '@tensorflow/tfjs';\nimport './App.css';\nimport labels from './labels';\n\nfunction App() {\n  const IMAGE_SIZE = 256;\n  const INPUT_SHAPE = [64, 64];\n  const PROBABILITY_THRESHOLD = 0.01;\n  const signature = useRef(null);\n  const [model, setModel] = useState(null);\n  const [matches, setMatches] = useState([]);\n\n  useEffect(() => {\n    tf.loadLayersModel('/etl8b/model/model.json').then(model => {\n      setModel(model);\n    });\n  }, []);\n\n  function clear() {\n    signature.current.clear();\n  }\n\n  function recognize() {\n    const canvas = signature.current.getTrimmedCanvas();\n    const context = canvas.getContext('2d');\n    const data = context.getImageData(0, 0, IMAGE_SIZE, IMAGE_SIZE);\n    const image = tf.browser.fromPixels(data, 1).resizeBilinear(INPUT_SHAPE).expandDims().minimum(tf.scalar(1));\n    model.predict(image, {batchSize: 1}).data().then(results => {\n      const predictions = results.reduce((p, r, i) => {\n        if (r >= PROBABILITY_THRESHOLD) {\n          p.push({character: labels[i], probability: r});\n        }\n        return p;\n      }, []);\n      predictions.sort((p1, p2) => p2.probability - p1.probability);\n      setMatches(predictions);\n    });\n  }\n\n  return (\n    <div className=\"app\">\n      <div className=\"container\">\n        <SignatureCanvas\n          ref={signature}\n          backgroundColor='black'\n          penColor='white'\n          canvasProps={{width: IMAGE_SIZE, height: IMAGE_SIZE, className: 'signature-canvas'}}\n        />\n        {model ? (\n          <div className=\"clearfix\">\n            <button onClick={clear} style={{float: \"left\"}}>Clear</button>\n            <button onClick={recognize} style={{float: \"right\"}}>Recognize</button>\n          </div>\n        ) : (\n          <div>Loading model...</div>\n        )}\n        <div>\n          {matches.map((match, index) => (\n            <div key={index}>{match.character} ({Math.round(match.probability * 100)}%)</div>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}